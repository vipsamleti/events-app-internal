'use strict';// express is a nodejs web server
// https://www.npmjs.com/package/express
var cov_2anw666cvs=function(){var path="/home/user512/sample-master/internal/server.js";var hash="5e3898f2f3c29237f6039081a4ff8c05c5d7d11e";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/user512/sample-master/internal/server.js",statementMap:{"0":{start:{line:5,column:16},end:{line:5,column:34}},"1":{start:{line:9,column:19},end:{line:9,column:41}},"2":{start:{line:12,column:12},end:{line:12,column:21}},"3":{start:{line:15,column:0},end:{line:15,column:27}},"4":{start:{line:18,column:0},end:{line:23,column:2}},"5":{start:{line:19,column:1},end:{line:19,column:48}},"6":{start:{line:20,column:4},end:{line:20,column:96}},"7":{start:{line:21,column:4},end:{line:21,column:97}},"8":{start:{line:22,column:4},end:{line:22,column:11}},"9":{start:{line:27,column:19},end:{line:32,column:1}},"10":{start:{line:35,column:0},end:{line:37,column:3}},"11":{start:{line:36,column:4},end:{line:36,column:17}},"12":{start:{line:40,column:0},end:{line:42,column:3}},"13":{start:{line:41,column:4},end:{line:41,column:35}},"14":{start:{line:46,column:0},end:{line:48,column:3}},"15":{start:{line:47,column:4},end:{line:47,column:25}},"16":{start:{line:53,column:0},end:{line:64,column:3}},"17":{start:{line:55,column:15},end:{line:59,column:6}},"18":{start:{line:61,column:4},end:{line:61,column:31}},"19":{start:{line:63,column:4},end:{line:63,column:25}},"20":{start:{line:66,column:0},end:{line:69,column:3}},"21":{start:{line:67,column:4},end:{line:67,column:29}},"22":{start:{line:68,column:4},end:{line:68,column:51}},"23":{start:{line:71,column:13},end:{line:71,column:55}},"24":{start:{line:72,column:15},end:{line:76,column:2}},"25":{start:{line:73,column:17},end:{line:73,column:41}},"26":{start:{line:74,column:17},end:{line:74,column:38}},"27":{start:{line:75,column:4},end:{line:75,column:66}},"28":{start:{line:78,column:0},end:{line:78,column:21}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:18,column:8},end:{line:18,column:9}},loc:{start:{line:18,column:34},end:{line:23,column:1}},line:18},"1":{name:"(anonymous_1)",decl:{start:{line:35,column:13},end:{line:35,column:14}},loc:{start:{line:35,column:27},end:{line:37,column:1}},line:35},"2":{name:"(anonymous_2)",decl:{start:{line:40,column:20},end:{line:40,column:21}},loc:{start:{line:40,column:34},end:{line:42,column:1}},line:40},"3":{name:"(anonymous_3)",decl:{start:{line:46,column:19},end:{line:46,column:20}},loc:{start:{line:46,column:33},end:{line:48,column:1}},line:46},"4":{name:"(anonymous_4)",decl:{start:{line:53,column:19},end:{line:53,column:20}},loc:{start:{line:53,column:33},end:{line:64,column:1}},line:53},"5":{name:"(anonymous_5)",decl:{start:{line:66,column:8},end:{line:66,column:9}},loc:{start:{line:66,column:33},end:{line:69,column:1}},line:66},"6":{name:"(anonymous_6)",decl:{start:{line:72,column:32},end:{line:72,column:33}},loc:{start:{line:72,column:38},end:{line:76,column:1}},line:72}},branchMap:{"0":{loc:{start:{line:71,column:13},end:{line:71,column:55}},type:"cond-expr",locations:[{start:{line:71,column:32},end:{line:71,column:48}},{start:{line:71,column:51},end:{line:71,column:55}}],line:71}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{"0":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"5e3898f2f3c29237f6039081a4ff8c05c5d7d11e"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const express=(cov_2anw666cvs.s[0]++,require('express'));// converts content in the request into parameter req.body
// https://www.npmjs.com/package/body-parser
const bodyParser=(cov_2anw666cvs.s[1]++,require('body-parser'));// create the server
const app=(cov_2anw666cvs.s[2]++,express());// the backend server will parse json, not a form request
cov_2anw666cvs.s[3]++;app.use(bodyParser.json());// allow AJAX calls from 3rd party domains
cov_2anw666cvs.s[4]++;app.use(function(req,res,next){cov_2anw666cvs.f[0]++;cov_2anw666cvs.s[5]++;res.header("Access-Control-Allow-Origin","*");cov_2anw666cvs.s[6]++;res.header('Access-Control-Allow-Methods','PUT, POST, PATCH, MERGE, GET, DELETE, OPTIONS');cov_2anw666cvs.s[7]++;res.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept");cov_2anw666cvs.s[8]++;next();});// mock events data - for a real solution this data should be coming 
// from a cloud data store
const mockEvents=(cov_2anw666cvs.s[9]++,{events:[{title:'an event',id:1,description:'something really cool'},{title:'another event',id:2,description:'something even cooler'}]});// health endpoint - returns an empty array
cov_2anw666cvs.s[10]++;app.get('/',(req,res)=>{cov_2anw666cvs.f[1]++;cov_2anw666cvs.s[11]++;res.json([]);});// version endpoint to provide easy convient method to demonstrating tests pass/fail
cov_2anw666cvs.s[12]++;app.get('/version',(req,res)=>{cov_2anw666cvs.f[2]++;cov_2anw666cvs.s[13]++;res.json({version:'1.0.0'});});// mock events endpoint. this would be replaced by a call to a datastore
// if you went on to develop this as a real application.
cov_2anw666cvs.s[14]++;app.get('/events',(req,res)=>{cov_2anw666cvs.f[3]++;cov_2anw666cvs.s[15]++;res.json(mockEvents);});// Adds an event - in a real solution, this would insert into a cloud datastore.
// Currently this simply adds an event to the mock array in memory
// this will produce unexpected behavior in a stateless kubernetes cluster. 
cov_2anw666cvs.s[16]++;app.post('/event',(req,res)=>{cov_2anw666cvs.f[4]++;// create a new object from the json data and add an id
const ev=(cov_2anw666cvs.s[17]++,{title:req.body.title,description:req.body.description,id:mockEvents.events.length+1// add to the mock array
});cov_2anw666cvs.s[18]++;mockEvents.events.push(ev);// return the complete array
cov_2anw666cvs.s[19]++;res.json(mockEvents);});cov_2anw666cvs.s[20]++;app.use((err,req,res,next)=>{cov_2anw666cvs.f[5]++;cov_2anw666cvs.s[21]++;console.error(err.stack);cov_2anw666cvs.s[22]++;res.status(500).json({message:err.message});});const PORT=(cov_2anw666cvs.s[23]++,process.env.PORT?(cov_2anw666cvs.b[0][0]++,process.env.PORT):(cov_2anw666cvs.b[0][1]++,8082));const server=(cov_2anw666cvs.s[24]++,app.listen(PORT,()=>{cov_2anw666cvs.f[6]++;const host=(cov_2anw666cvs.s[25]++,server.address().address);const port=(cov_2anw666cvs.s[26]++,server.address().port);cov_2anw666cvs.s[27]++;console.log(`Events app listening at http://${host}:${port}`);}));cov_2anw666cvs.s[28]++;module.exports=app;